$#include <interfaces/TransformInterface.h>
$using namespace fawkes;
namespace fawkes {
class TransformInterface : public Interface
{

  char * frame();
  void set_frame(const char * new_frame);
  int maxlenof_frame() const;
  char * child_frame();
  void set_child_frame(const char * new_child_frame);
  int maxlenof_child_frame() const;
  double translation(int index);
  void set_translation(unsigned int index, const double new_translation);
  int maxlenof_translation() const;
  double rotation(int index);
  void set_rotation(unsigned int index, const double new_rotation);
  int maxlenof_rotation() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
