$#include <interfaces/facer.h>
$using namespace fawkes;
namespace fawkes {
class FacerInterface : public Interface
{

  typedef enum {
    OPMODE_DISABLED,
    OPMODE_DETECTION,
    OPMODE_RECOGNITION,
    OPMODE_LEARNING
  } if_facer_opmode_t;

  class LearnFaceMessage : public Message
  {
    LearnFaceMessage(char * ini_face_label);
    LearnFaceMessage();
    ~LearnFaceMessage();

    char * face_label();
    void set_face_label(const char * new_face_label);
    size_t maxlenof_face_label() const;
  };

  class SetOpmodeMessage : public Message
  {
    SetOpmodeMessage(if_facer_opmode_t ini_opmode);
    SetOpmodeMessage();
    ~SetOpmodeMessage();

    if_facer_opmode_t opmode();
    void set_opmode(const if_facer_opmode_t new_opmode);
    size_t maxlenof_opmode() const;
  };

  if_facer_opmode_t opmode();
  void set_opmode(const if_facer_opmode_t new_opmode);
  size_t maxlenof_opmode() const;
  char * face_label();
  void set_face_label(const char * new_face_label);
  size_t maxlenof_face_label() const;
  bool is_learning_done();
  void set_learning_done(const bool new_learning_done);
  size_t maxlenof_learning_done() const;
  unsigned int num_detections();
  void set_num_detections(const unsigned int new_num_detections);
  size_t maxlenof_num_detections() const;
  float sec_since_detection();
  void set_sec_since_detection(const float new_sec_since_detection);
  size_t maxlenof_sec_since_detection() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  size_t                  hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
