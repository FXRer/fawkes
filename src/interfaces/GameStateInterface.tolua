$#include <interfaces/GameStateInterface.h>
$using namespace fawkes;
namespace fawkes {
class GameStateInterface : public Interface
{
  static const unsigned int GS_FROZEN;
  static const unsigned int GS_PLAY;
  static const unsigned int GS_KICK_OFF;
  static const unsigned int GS_DROP_BALL;
  static const unsigned int GS_PENALTY;
  static const unsigned int GS_CORNER_KICK;
  static const unsigned int GS_THROW_IN;
  static const unsigned int GS_FREE_KICK;
  static const unsigned int GS_GOAL_KICK;
  static const unsigned int GS_HALF_TIME;
  static const unsigned int GS_SPL_INITIAL;
  static const unsigned int GS_SPL_READY;
  static const unsigned int GS_SPL_SET;
  static const unsigned int GS_SPL_PLAY;
  static const unsigned int GS_SPL_FINISHED;

  typedef enum {
    TEAM_NONE,
    TEAM_CYAN,
    TEAM_MAGENTA,
    TEAM_BOTH
  } if_gamestate_team_t;

  typedef enum {
    GOAL_BLUE,
    GOAL_YELLOW
  } if_gamestate_goalcolor_t;

  typedef enum {
    HALF_FIRST,
    HALF_SECOND
  } if_gamestate_half_t;

  typedef enum {
    ROLE_GOALIE,
    ROLE_DEFENDER,
    ROLE_MID_LEFT,
    ROLE_MID_RIGHT,
    ROLE_ATTACKER
  } if_gamestate_role_t;

  class SetTeamColorMessage : public Message
  {
    SetTeamColorMessage(if_gamestate_team_t ini_our_team);
    SetTeamColorMessage();
    ~SetTeamColorMessage();

    if_gamestate_team_t our_team();
    void set_our_team(const if_gamestate_team_t new_our_team);
    int maxlenof_our_team() const;
  };

  class SetKickoffMessage : public Message
  {
    SetKickoffMessage(bool ini_kickoff);
    SetKickoffMessage();
    ~SetKickoffMessage();

    bool is_kickoff();
    void set_kickoff(const bool new_kickoff);
    int maxlenof_kickoff() const;
  };

  class SetStateTeamMessage : public Message
  {
    SetStateTeamMessage(if_gamestate_team_t ini_state_team);
    SetStateTeamMessage();
    ~SetStateTeamMessage();

    if_gamestate_team_t state_team();
    void set_state_team(const if_gamestate_team_t new_state_team);
    int maxlenof_state_team() const;
  };

  unsigned int game_state();
  void set_game_state(const unsigned int new_game_state);
  int maxlenof_game_state() const;
  if_gamestate_team_t state_team();
  void set_state_team(const if_gamestate_team_t new_state_team);
  int maxlenof_state_team() const;
  if_gamestate_team_t our_team();
  void set_our_team(const if_gamestate_team_t new_our_team);
  int maxlenof_our_team() const;
  if_gamestate_goalcolor_t our_goal_color();
  void set_our_goal_color(const if_gamestate_goalcolor_t new_our_goal_color);
  int maxlenof_our_goal_color() const;
  if_gamestate_half_t half();
  void set_half(const if_gamestate_half_t new_half);
  int maxlenof_half() const;
  bool is_kickoff();
  void set_kickoff(const bool new_kickoff);
  int maxlenof_kickoff() const;
  if_gamestate_role_t role();
  void set_role(const if_gamestate_role_t new_role);
  int maxlenof_role() const;
  unsigned int score_cyan();
  void set_score_cyan(const unsigned int new_score_cyan);
  int maxlenof_score_cyan() const;
  unsigned int score_magenta();
  void set_score_magenta(const unsigned int new_score_magenta);
  int maxlenof_score_magenta() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
