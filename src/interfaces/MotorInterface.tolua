$#include <interfaces/MotorInterface.h>
$using namespace fawkes;
namespace fawkes {
class MotorInterface : public Interface
{
  static const uint32_t MOTOR_ENABLED;
  static const uint32_t MOTOR_DISABLED;
  static const uint32_t DRIVE_MODE_RPM;
  static const uint32_t DRIVE_MODE_TRANS;
  static const uint32_t DRIVE_MODE_ROT;
  static const uint32_t DRIVE_MODE_TRANS_ROT;
  static const uint32_t DRIVE_MODE_ORBIT;
  static const uint32_t DRIVE_MODE_LINE_TRANS_ROT;

  class SetMotorStateMessage : public Message
  {
    SetMotorStateMessage(uint32_t ini_motor_state);
    SetMotorStateMessage();
    ~SetMotorStateMessage();

    uint32_t motor_state();
    void set_motor_state(const uint32_t new_motor_state);
    int maxlenof_motor_state() const;
  };

  class AcquireControlMessage : public Message
  {
    AcquireControlMessage(uint32_t ini_controller, char * ini_controller_thread_name);
    AcquireControlMessage();
    ~AcquireControlMessage();

    uint32_t controller();
    void set_controller(const uint32_t new_controller);
    int maxlenof_controller() const;
    char * controller_thread_name();
    void set_controller_thread_name(const char * new_controller_thread_name);
    int maxlenof_controller_thread_name() const;
  };

  class ResetOdometryMessage : public Message
  {
    ResetOdometryMessage();
    ~ResetOdometryMessage();

  };

  class DriveRPMMessage : public Message
  {
    DriveRPMMessage(float ini_front_right, float ini_front_left, float ini_rear);
    DriveRPMMessage();
    ~DriveRPMMessage();

    float front_right();
    void set_front_right(const float new_front_right);
    int maxlenof_front_right() const;
    float front_left();
    void set_front_left(const float new_front_left);
    int maxlenof_front_left() const;
    float rear();
    void set_rear(const float new_rear);
    int maxlenof_rear() const;
  };

  class GotoMessage : public Message
  {
    GotoMessage(float ini_x, float ini_y, float ini_phi, float ini_time_sec);
    GotoMessage();
    ~GotoMessage();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float phi();
    void set_phi(const float new_phi);
    int maxlenof_phi() const;
    float time_sec();
    void set_time_sec(const float new_time_sec);
    int maxlenof_time_sec() const;
  };

  class TransMessage : public Message
  {
    TransMessage(float ini_vx, float ini_vy);
    TransMessage();
    ~TransMessage();

    float vx();
    void set_vx(const float new_vx);
    int maxlenof_vx() const;
    float vy();
    void set_vy(const float new_vy);
    int maxlenof_vy() const;
  };

  class RotMessage : public Message
  {
    RotMessage(float ini_omega);
    RotMessage();
    ~RotMessage();

    float omega();
    void set_omega(const float new_omega);
    int maxlenof_omega() const;
  };

  class TransRotMessage : public Message
  {
    TransRotMessage(float ini_vx, float ini_vy, float ini_omega);
    TransRotMessage();
    ~TransRotMessage();

    float vx();
    void set_vx(const float new_vx);
    int maxlenof_vx() const;
    float vy();
    void set_vy(const float new_vy);
    int maxlenof_vy() const;
    float omega();
    void set_omega(const float new_omega);
    int maxlenof_omega() const;
  };

  class OrbitMessage : public Message
  {
    OrbitMessage(float ini_px, float ini_py, float ini_omega);
    OrbitMessage();
    ~OrbitMessage();

    float px();
    void set_px(const float new_px);
    int maxlenof_px() const;
    float py();
    void set_py(const float new_py);
    int maxlenof_py() const;
    float omega();
    void set_omega(const float new_omega);
    int maxlenof_omega() const;
  };

  class LinTransRotMessage : public Message
  {
    LinTransRotMessage(float ini_vx, float ini_vy, float ini_omega);
    LinTransRotMessage();
    ~LinTransRotMessage();

    float vx();
    void set_vx(const float new_vx);
    int maxlenof_vx() const;
    float vy();
    void set_vy(const float new_vy);
    int maxlenof_vy() const;
    float omega();
    void set_omega(const float new_omega);
    int maxlenof_omega() const;
  };

  uint32_t motor_state();
  void set_motor_state(const uint32_t new_motor_state);
  int maxlenof_motor_state() const;
  uint32_t drive_mode();
  void set_drive_mode(const uint32_t new_drive_mode);
  int maxlenof_drive_mode() const;
  int32_t right_rpm();
  void set_right_rpm(const int32_t new_right_rpm);
  int maxlenof_right_rpm() const;
  int32_t rear_rpm();
  void set_rear_rpm(const int32_t new_rear_rpm);
  int maxlenof_rear_rpm() const;
  int32_t left_rpm();
  void set_left_rpm(const int32_t new_left_rpm);
  int maxlenof_left_rpm() const;
  float odometry_path_length();
  void set_odometry_path_length(const float new_odometry_path_length);
  int maxlenof_odometry_path_length() const;
  float odometry_position_x();
  void set_odometry_position_x(const float new_odometry_position_x);
  int maxlenof_odometry_position_x() const;
  float odometry_position_y();
  void set_odometry_position_y(const float new_odometry_position_y);
  int maxlenof_odometry_position_y() const;
  float odometry_orientation();
  void set_odometry_orientation(const float new_odometry_orientation);
  int maxlenof_odometry_orientation() const;
  float vx();
  void set_vx(const float new_vx);
  int maxlenof_vx() const;
  float vy();
  void set_vy(const float new_vy);
  int maxlenof_vy() const;
  float omega();
  void set_omega(const float new_omega);
  int maxlenof_omega() const;
  uint32_t controller();
  void set_controller(const uint32_t new_controller);
  int maxlenof_controller() const;
  char * controller_thread_name();
  void set_controller_thread_name(const char * new_controller_thread_name);
  int maxlenof_controller_thread_name() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
