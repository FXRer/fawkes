$#include <interfaces/Position2DTrackInterface.h>
$using namespace fawkes;
namespace fawkes {
class Position2DTrackInterface : public Interface
{

  float track_x_positions(int index);
  void set_track_x_positions(unsigned int index, const float new_track_x_positions);
  int maxlenof_track_x_positions() const;
  float track_y_positions(int index);
  void set_track_y_positions(unsigned int index, const float new_track_y_positions);
  int maxlenof_track_y_positions() const;
  int32_t track_timestamps(int index);
  void set_track_timestamps(unsigned int index, const int32_t new_track_timestamps);
  int maxlenof_track_timestamps() const;
  bool is_valid();
  void set_valid(const bool new_valid);
  int maxlenof_valid() const;
  uint32_t length();
  void set_length(const uint32_t new_length);
  int maxlenof_length() const;
  uint32_t track_id();
  void set_track_id(const uint32_t new_track_id);
  int maxlenof_track_id() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
