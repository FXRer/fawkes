$#include <interfaces/ObjectPositionInterface.h>
$using namespace fawkes;
namespace fawkes {
class ObjectPositionInterface : public Interface
{
  static const unsigned int TYPE_OTHER;
  static const unsigned int TYPE_BALL;
  static const unsigned int TYPE_OPPONENT;
  static const unsigned int TYPE_TEAMMEMBER;
  static const unsigned int TYPE_LINE;
  static const unsigned int TYPE_SELF;
  static const unsigned int TYPE_GOAL_BLUE;
  static const unsigned int TYPE_GOAL_YELLOW;
  static const unsigned int FLAG_NONE;
  static const unsigned int FLAG_HAS_WORLD;
  static const unsigned int FLAG_HAS_RELATIVE_CARTESIAN;
  static const unsigned int FLAG_HAS_RELATIVE_POLAR;
  static const unsigned int FLAG_HAS_EULER_ANGLES;
  static const unsigned int FLAG_HAS_EXTENT;
  static const unsigned int FLAG_HAS_VOLUME_EXTENT;
  static const unsigned int FLAG_HAS_CIRCULAR_EXTENT;
  static const unsigned int FLAG_HAS_COVARIANCES;
  static const unsigned int FLAG_HAS_WORLD_VELOCITY;
  static const unsigned int FLAG_HAS_Z_AS_ORI;
  static const unsigned int FLAG_IS_FIXED_OBJECT;

  unsigned int object_type();
  void set_object_type(const unsigned int new_object_type);
  size_t maxlenof_object_type() const;
  unsigned int flags();
  void set_flags(const unsigned int new_flags);
  size_t maxlenof_flags() const;
  bool is_visible();
  void set_visible(const bool new_visible);
  size_t maxlenof_visible() const;
  bool is_valid();
  void set_valid(const bool new_valid);
  size_t maxlenof_valid() const;
  int visibility_history();
  void set_visibility_history(const int new_visibility_history);
  size_t maxlenof_visibility_history() const;
  float roll();
  void set_roll(const float new_roll);
  size_t maxlenof_roll() const;
  float pitch();
  void set_pitch(const float new_pitch);
  size_t maxlenof_pitch() const;
  float yaw();
  void set_yaw(const float new_yaw);
  size_t maxlenof_yaw() const;
  float distance();
  void set_distance(const float new_distance);
  size_t maxlenof_distance() const;
  float bearing();
  void set_bearing(const float new_bearing);
  size_t maxlenof_bearing() const;
  float slope();
  void set_slope(const float new_slope);
  size_t maxlenof_slope() const;
  float * dbs_covariance();
  void set_dbs_covariance(const float * new_dbs_covariance);
  size_t maxlenof_dbs_covariance() const;
  float world_x();
  void set_world_x(const float new_world_x);
  size_t maxlenof_world_x() const;
  float world_y();
  void set_world_y(const float new_world_y);
  size_t maxlenof_world_y() const;
  float world_z();
  void set_world_z(const float new_world_z);
  size_t maxlenof_world_z() const;
  float * world_xyz_covariance();
  void set_world_xyz_covariance(const float * new_world_xyz_covariance);
  size_t maxlenof_world_xyz_covariance() const;
  float relative_x();
  void set_relative_x(const float new_relative_x);
  size_t maxlenof_relative_x() const;
  float relative_y();
  void set_relative_y(const float new_relative_y);
  size_t maxlenof_relative_y() const;
  float relative_z();
  void set_relative_z(const float new_relative_z);
  size_t maxlenof_relative_z() const;
  float * relative_xyz_covariance();
  void set_relative_xyz_covariance(const float * new_relative_xyz_covariance);
  size_t maxlenof_relative_xyz_covariance() const;
  float extent_x();
  void set_extent_x(const float new_extent_x);
  size_t maxlenof_extent_x() const;
  float extent_y();
  void set_extent_y(const float new_extent_y);
  size_t maxlenof_extent_y() const;
  float extent_z();
  void set_extent_z(const float new_extent_z);
  size_t maxlenof_extent_z() const;
  float world_x_velocity();
  void set_world_x_velocity(const float new_world_x_velocity);
  size_t maxlenof_world_x_velocity() const;
  float world_y_velocity();
  void set_world_y_velocity(const float new_world_y_velocity);
  size_t maxlenof_world_y_velocity() const;
  float world_z_velocity();
  void set_world_z_velocity(const float new_world_z_velocity);
  size_t maxlenof_world_z_velocity() const;
  float * world_xyz_velocity_covariance();
  void set_world_xyz_velocity_covariance(const float * new_world_xyz_velocity_covariance);
  size_t maxlenof_world_xyz_velocity_covariance() const;
  float relative_x_velocity();
  void set_relative_x_velocity(const float new_relative_x_velocity);
  size_t maxlenof_relative_x_velocity() const;
  float relative_y_velocity();
  void set_relative_y_velocity(const float new_relative_y_velocity);
  size_t maxlenof_relative_y_velocity() const;
  float relative_z_velocity();
  void set_relative_z_velocity(const float new_relative_z_velocity);
  size_t maxlenof_relative_z_velocity() const;
  float * relative_xyz_velocity_covariance();
  void set_relative_xyz_velocity_covariance(const float * new_relative_xyz_velocity_covariance);
  size_t maxlenof_relative_xyz_velocity_covariance() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  size_t                  hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
