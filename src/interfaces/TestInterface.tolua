$#include <interfaces/TestInterface.h>
$using namespace fawkes;
namespace fawkes {
class TestInterface : public Interface
{
  static const int32_t TEST_CONSTANT;
  static const float TEST_FLOAT_CONSTANT;

  typedef enum {
    TEST_ENUM_1,
    TEST_ENUM_2
  } TestEnum;

  class SetTestIntMessage : public Message
  {
    SetTestIntMessage(int32_t ini_test_int);
    SetTestIntMessage();
    ~SetTestIntMessage();

    int32_t test_int();
    void set_test_int(const int32_t new_test_int);
    int maxlenof_test_int() const;
  };

  class SetTestStringMessage : public Message
  {
    SetTestStringMessage(char * ini_test_string);
    SetTestStringMessage();
    ~SetTestStringMessage();

    char * test_string();
    void set_test_string(const char * new_test_string);
    int maxlenof_test_string() const;
  };

  class CalculateMessage : public Message
  {
    CalculateMessage(int32_t ini_summand, int32_t ini_addend);
    CalculateMessage();
    ~CalculateMessage();

    int32_t summand();
    void set_summand(const int32_t new_summand);
    int maxlenof_summand() const;
    int32_t addend();
    void set_addend(const int32_t new_addend);
    int maxlenof_addend() const;
  };

  bool is_test_bool();
  void set_test_bool(const bool new_test_bool);
  int maxlenof_test_bool() const;
  int32_t test_int();
  void set_test_int(const int32_t new_test_int);
  int maxlenof_test_int() const;
  uint8_t flags();
  void set_flags(const uint8_t new_flags);
  int maxlenof_flags() const;
  char * test_string();
  void set_test_string(const char * new_test_string);
  int maxlenof_test_string() const;
  int32_t result();
  void set_result(const int32_t new_result);
  int maxlenof_result() const;
  uint32_t test_uint();
  void set_test_uint(const uint32_t new_test_uint);
  int maxlenof_test_uint() const;
  uint64_t test_ulint();
  void set_test_ulint(const uint64_t new_test_ulint);
  int maxlenof_test_ulint() const;
  int64_t test_lint();
  void set_test_lint(const int64_t new_test_lint);
  int maxlenof_test_lint() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
