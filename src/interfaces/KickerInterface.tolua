$#include <interfaces/KickerInterface.h>
$using namespace fawkes;
namespace fawkes {
class KickerInterface : public Interface
{

  typedef enum {
    GUIDE_BALL_LEFT,
    GUIDE_BALL_RIGHT
  } GuideBallSideEnum;

  class KickMessage : public Message
  {
    KickMessage(bool ini_left, bool ini_center, bool ini_right, uint32_t ini_intensity);
    KickMessage();
    ~KickMessage();

    bool is_left();
    void set_left(const bool new_left);
    int maxlenof_left() const;
    bool is_center();
    void set_center(const bool new_center);
    int maxlenof_center() const;
    bool is_right();
    void set_right(const bool new_right);
    int maxlenof_right() const;
    uint32_t intensity();
    void set_intensity(const uint32_t new_intensity);
    int maxlenof_intensity() const;
  };

  class ResetCounterMessage : public Message
  {
    ResetCounterMessage();
    ~ResetCounterMessage();

  };

  class GuideBallMessage : public Message
  {
    GuideBallMessage(GuideBallSideEnum ini_guide_ball_side);
    GuideBallMessage();
    ~GuideBallMessage();

    GuideBallSideEnum guide_ball_side();
    void set_guide_ball_side(const GuideBallSideEnum new_guide_ball_side);
    int maxlenof_guide_ball_side() const;
  };

  int32_t num_kicks_left();
  void set_num_kicks_left(const int32_t new_num_kicks_left);
  int maxlenof_num_kicks_left() const;
  int32_t num_kicks_center();
  void set_num_kicks_center(const int32_t new_num_kicks_center);
  int maxlenof_num_kicks_center() const;
  int32_t num_kicks_right();
  void set_num_kicks_right(const int32_t new_num_kicks_right);
  int maxlenof_num_kicks_right() const;
  GuideBallSideEnum guide_ball_side();
  void set_guide_ball_side(const GuideBallSideEnum new_guide_ball_side);
  int maxlenof_guide_ball_side() const;
  uint32_t current_intensity();
  void set_current_intensity(const uint32_t new_current_intensity);
  int maxlenof_current_intensity() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
