$#include <interfaces/LocalizerControlInterface.h>
$using namespace fawkes;
namespace fawkes {
class LocalizerControlInterface : public Interface
{

  class ResetMessage : public Message
  {
    ResetMessage(float ini_x, float ini_y, float ini_ori, float ini_variance);
    ResetMessage();
    ~ResetMessage();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float ori();
    void set_ori(const float new_ori);
    int maxlenof_ori() const;
    float variance();
    void set_variance(const float new_variance);
    int maxlenof_variance() const;
  };

  char * map_name();
  void set_map_name(const char * new_map_name);
  int maxlenof_map_name() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
