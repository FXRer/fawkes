$#include <interfaces/LedInterface.h>
$using namespace fawkes;
namespace fawkes {
class LedInterface : public Interface
{
  static const float ON;
  static const float OFF;

  class SetIntensityMessage : public Message
  {
    SetIntensityMessage(float ini_time_sec, float ini_intensity);
    SetIntensityMessage();
    ~SetIntensityMessage();

    float time_sec();
    void set_time_sec(const float new_time_sec);
    size_t maxlenof_time_sec() const;
    float intensity();
    void set_intensity(const float new_intensity);
    size_t maxlenof_intensity() const;
  };

  class TurnOnMessage : public Message
  {
    TurnOnMessage();
    ~TurnOnMessage();

  };

  class TurnOffMessage : public Message
  {
    TurnOffMessage();
    ~TurnOffMessage();

  };

  float intensity();
  void set_intensity(const float new_intensity);
  size_t maxlenof_intensity() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  size_t                  hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
