$#include <interfaces/KatanaInterface.h>
$using namespace fawkes;
namespace fawkes {
class KatanaInterface : public Interface
{
  static const unsigned int SENSOR_IR_RIGHT_INNER_MIDDLE;
  static const unsigned int SENSOR_IR_RIGHT_INNER_FRONT;
  static const unsigned int SENSOR_RESERVED_2;
  static const unsigned int SENSOR_COND_BOTH;
  static const unsigned int SENSOR_IR_RIGHT_OUTER_FRONT;
  static const unsigned int SENSOR_IR_RIGHT_BOTTOM_FRONT;
  static const unsigned int SENSOR_FORCE_RIGHT_REAR;
  static const unsigned int SENSOR_FORCE_RIGHT_FRONT;
  static const unsigned int SENSOR_IR_LEFT_INNER_MIDDLE;
  static const unsigned int SENSOR_IR_LEFT_INNER_FRONT;
  static const unsigned int SENSOR_RESERVED_10;
  static const unsigned int SENSOR_IR_CENTER_GRIPPER;
  static const unsigned int SENSOR_IR_LEFT_OUTER_FRONT;
  static const unsigned int SENSOR_IR_LEFT_BOTTOM_FRONT;
  static const unsigned int SENSOR_FORCE_LEFT_REAR;
  static const unsigned int SENSOR_FORCE_LEFT_FRONT;
  static const unsigned int ERROR_NONE;
  static const unsigned int ERROR_UNSPECIFIC;
  static const unsigned int ERROR_CMD_START_FAILED;
  static const unsigned int ERROR_NO_SOLUTION;
  static const unsigned int ERROR_COMMUNICATION;
  static const unsigned int ERROR_MOTOR_CRASHED;

  class StopMessage : public Message
  {
    StopMessage();
    ~StopMessage();

  };

  class FlushMessage : public Message
  {
    FlushMessage();
    ~FlushMessage();

  };

  class ParkMessage : public Message
  {
    ParkMessage();
    ~ParkMessage();

  };

  class LinearGotoMessage : public Message
  {
    LinearGotoMessage(char * ini_trans_frame, char * ini_rot_frame, float ini_theta_error, float ini_x, float ini_y, float ini_z, float ini_phi, float ini_theta, float ini_psi);
    LinearGotoMessage();
    ~LinearGotoMessage();

    char * trans_frame();
    void set_trans_frame(const char * new_trans_frame);
    int maxlenof_trans_frame() const;
    char * rot_frame();
    void set_rot_frame(const char * new_rot_frame);
    int maxlenof_rot_frame() const;
    float theta_error();
    void set_theta_error(const float new_theta_error);
    int maxlenof_theta_error() const;
    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float z();
    void set_z(const float new_z);
    int maxlenof_z() const;
    float phi();
    void set_phi(const float new_phi);
    int maxlenof_phi() const;
    float theta();
    void set_theta(const float new_theta);
    int maxlenof_theta() const;
    float psi();
    void set_psi(const float new_psi);
    int maxlenof_psi() const;
  };

  class LinearGotoKniMessage : public Message
  {
    LinearGotoKniMessage(float ini_x, float ini_y, float ini_z, float ini_phi, float ini_theta, float ini_psi);
    LinearGotoKniMessage();
    ~LinearGotoKniMessage();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float z();
    void set_z(const float new_z);
    int maxlenof_z() const;
    float phi();
    void set_phi(const float new_phi);
    int maxlenof_phi() const;
    float theta();
    void set_theta(const float new_theta);
    int maxlenof_theta() const;
    float psi();
    void set_psi(const float new_psi);
    int maxlenof_psi() const;
  };

  class ObjectGotoMessage : public Message
  {
    ObjectGotoMessage(char * ini_object, float ini_rot_x);
    ObjectGotoMessage();
    ~ObjectGotoMessage();

    char * object();
    void set_object(const char * new_object);
    int maxlenof_object() const;
    float rot_x();
    void set_rot_x(const float new_rot_x);
    int maxlenof_rot_x() const;
  };

  class CalibrateMessage : public Message
  {
    CalibrateMessage();
    ~CalibrateMessage();

  };

  class OpenGripperMessage : public Message
  {
    OpenGripperMessage();
    ~OpenGripperMessage();

  };

  class CloseGripperMessage : public Message
  {
    CloseGripperMessage();
    ~CloseGripperMessage();

  };

  class SetEnabledMessage : public Message
  {
    SetEnabledMessage(bool ini_enabled);
    SetEnabledMessage();
    ~SetEnabledMessage();

    bool is_enabled();
    void set_enabled(const bool new_enabled);
    int maxlenof_enabled() const;
  };

  class SetMaxVelocityMessage : public Message
  {
    SetMaxVelocityMessage(unsigned char ini_max_velocity);
    SetMaxVelocityMessage();
    ~SetMaxVelocityMessage();

    unsigned char max_velocity();
    void set_max_velocity(const unsigned char new_max_velocity);
    int maxlenof_max_velocity() const;
  };

  class SetMotorEncoderMessage : public Message
  {
    SetMotorEncoderMessage(unsigned int ini_nr, unsigned int ini_enc);
    SetMotorEncoderMessage();
    ~SetMotorEncoderMessage();

    unsigned int nr();
    void set_nr(const unsigned int new_nr);
    int maxlenof_nr() const;
    unsigned int enc();
    void set_enc(const unsigned int new_enc);
    int maxlenof_enc() const;
  };

  class MoveMotorEncoderMessage : public Message
  {
    MoveMotorEncoderMessage(unsigned int ini_nr, unsigned int ini_enc);
    MoveMotorEncoderMessage();
    ~MoveMotorEncoderMessage();

    unsigned int nr();
    void set_nr(const unsigned int new_nr);
    int maxlenof_nr() const;
    unsigned int enc();
    void set_enc(const unsigned int new_enc);
    int maxlenof_enc() const;
  };

  class SetMotorAngleMessage : public Message
  {
    SetMotorAngleMessage(unsigned int ini_nr, float ini_angle);
    SetMotorAngleMessage();
    ~SetMotorAngleMessage();

    unsigned int nr();
    void set_nr(const unsigned int new_nr);
    int maxlenof_nr() const;
    float angle();
    void set_angle(const float new_angle);
    int maxlenof_angle() const;
  };

  class MoveMotorAngleMessage : public Message
  {
    MoveMotorAngleMessage(unsigned int ini_nr, float ini_angle);
    MoveMotorAngleMessage();
    ~MoveMotorAngleMessage();

    unsigned int nr();
    void set_nr(const unsigned int new_nr);
    int maxlenof_nr() const;
    float angle();
    void set_angle(const float new_angle);
    int maxlenof_angle() const;
  };

  unsigned int sensor_value(int index);
  void set_sensor_value(unsigned int index, const unsigned char new_sensor_value);
  int maxlenof_sensor_value() const;
  float x();
  void set_x(const float new_x);
  int maxlenof_x() const;
  float y();
  void set_y(const float new_y);
  int maxlenof_y() const;
  float z();
  void set_z(const float new_z);
  int maxlenof_z() const;
  float phi();
  void set_phi(const float new_phi);
  int maxlenof_phi() const;
  float theta();
  void set_theta(const float new_theta);
  int maxlenof_theta() const;
  float psi();
  void set_psi(const float new_psi);
  int maxlenof_psi() const;
  int encoders(int index);
  void set_encoders(unsigned int index, const int new_encoders);
  int maxlenof_encoders() const;
  float angles(int index);
  void set_angles(unsigned int index, const float new_angles);
  int maxlenof_angles() const;
  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool is_final();
  void set_final(const bool new_final);
  int maxlenof_final() const;
  unsigned int error_code();
  void set_error_code(const unsigned int new_error_code);
  int maxlenof_error_code() const;
  bool is_enabled();
  void set_enabled(const bool new_enabled);
  int maxlenof_enabled() const;
  bool is_calibrated();
  void set_calibrated(const bool new_calibrated);
  int maxlenof_calibrated() const;
  unsigned char max_velocity();
  void set_max_velocity(const unsigned char new_max_velocity);
  int maxlenof_max_velocity() const;
  unsigned char num_motors();
  void set_num_motors(const unsigned char new_num_motors);
  int maxlenof_num_motors() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
