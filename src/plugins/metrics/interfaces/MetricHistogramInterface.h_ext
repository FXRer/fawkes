
/***************************************************************************
 *  MetricHistogramInterface.h - Fawkes BlackBoard Interface - MetricHistogramInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2017  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_METRICHISTOGRAMINTERFACE_H_
#define __INTERFACES_METRICHISTOGRAMINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class MetricHistogramInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(MetricHistogramInterface)
 /// @endcond
 public:
  /* constants */

 private:
  /** Internal data storage, do NOT modify! */
  typedef struct __attribute__((packed)) {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    char labels[512]; /**< 
		  Labels must be given as key-value pairs of the form
		  "key=value[,key=value...]".
	   */
    uint64_t sample_count; /**< 
		  The number of all samples.
     */
    double sample_sum; /**< 
		  The sum of all samples.
	   */
    uint32_t bucket_count; /**< 
		  The number of valid entries in bucket array fields.
	   */
    uint64_t bucket_cumulative_count[16]; /**< 
		  The cumulative number of elements for the buckets.
	   */
    double bucket_upper_bound[16]; /**< 
		  The upper bound for the given bucket.
	   */
  } MetricHistogramInterface_data_t;

  MetricHistogramInterface_data_t *data;

 public:
  /* messages */
  virtual bool message_valid(const Message *message) const;
 private:
  MetricHistogramInterface();
  ~MetricHistogramInterface();

 public:
  /* Methods */
  char * labels() const;
  void set_labels(const char * new_labels);
  size_t maxlenof_labels() const;
  uint64_t sample_count() const;
  void set_sample_count(const uint64_t new_sample_count);
  size_t maxlenof_sample_count() const;
  double sample_sum() const;
  void set_sample_sum(const double new_sample_sum);
  size_t maxlenof_sample_sum() const;
  uint32_t bucket_count() const;
  void set_bucket_count(const uint32_t new_bucket_count);
  size_t maxlenof_bucket_count() const;
  uint64_t * bucket_cumulative_count() const;
  uint64_t bucket_cumulative_count(unsigned int index) const;
  void set_bucket_cumulative_count(unsigned int index, const uint64_t new_bucket_cumulative_count);
  void set_bucket_cumulative_count(const uint64_t * new_bucket_cumulative_count);
  size_t maxlenof_bucket_cumulative_count() const;
  double * bucket_upper_bound() const;
  double bucket_upper_bound(unsigned int index) const;
  void set_bucket_upper_bound(unsigned int index, const double new_bucket_upper_bound);
  void set_bucket_upper_bound(const double * new_bucket_upper_bound);
  size_t maxlenof_bucket_upper_bound() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
