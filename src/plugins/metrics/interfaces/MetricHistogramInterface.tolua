$#include <interfaces/MetricHistogramInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class MetricHistogramInterface : public Interface
{

  char * labels();
  void set_labels(const char * new_labels);
  int maxlenof_labels() const;
  unsigned long sample_count();
  void set_sample_count(const unsigned long new_sample_count);
  int maxlenof_sample_count() const;
  double sample_sum();
  void set_sample_sum(const double new_sample_sum);
  int maxlenof_sample_sum() const;
  unsigned int bucket_count();
  void set_bucket_count(const unsigned int new_bucket_count);
  int maxlenof_bucket_count() const;
  unsigned long bucket_cumulative_count(int index);
  void set_bucket_cumulative_count(unsigned int index, const unsigned long new_bucket_cumulative_count);
  int maxlenof_bucket_cumulative_count() const;
  double bucket_upper_bound(int index);
  void set_bucket_upper_bound(unsigned int index, const double new_bucket_upper_bound);
  int maxlenof_bucket_upper_bound() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  fawkes::Message * msgq_first @ msgq_first_generic();
  bool          msgq_empty();


};


$[

assert(fawkes.Interface.msgq_first)
assert(fawkes.Interface.msgq_enqueue)
assert(fawkes.Interface.create_message)

fawkes.MetricHistogramInterface.msgq_first     = fawkes.Interface.msgq_first
fawkes.MetricHistogramInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
fawkes.MetricHistogramInterface.create_message = fawkes.Interface.create_message

$]

}
