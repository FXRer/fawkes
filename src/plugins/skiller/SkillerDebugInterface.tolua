$#include <interfaces/SkillerDebugInterface.h>
$using namespace fawkes;
namespace fawkes {
class SkillerDebugInterface : public Interface
{

  typedef enum {
    GD_TOP_BOTTOM,
    GD_BOTTOM_TOP,
    GD_LEFT_RIGHT,
    GD_RIGHT_LEFT
  } GraphDirectionEnum;

  class SetGraphMessage : public Message
  {
    SetGraphMessage(char * ini_graph_fsm);
    SetGraphMessage();
    ~SetGraphMessage();

    char * graph_fsm();
    void set_graph_fsm(const char * new_graph_fsm);
    int maxlenof_graph_fsm() const;
  };

  class SetGraphDirectionMessage : public Message
  {
    SetGraphDirectionMessage(GraphDirectionEnum ini_graph_dir);
    SetGraphDirectionMessage();
    ~SetGraphDirectionMessage();

    GraphDirectionEnum graph_dir();
    void set_graph_dir(const GraphDirectionEnum new_graph_dir);
    int maxlenof_graph_dir() const;
  };

  class SetGraphColoredMessage : public Message
  {
    SetGraphColoredMessage(bool ini_graph_colored);
    SetGraphColoredMessage();
    ~SetGraphColoredMessage();

    bool is_graph_colored();
    void set_graph_colored(const bool new_graph_colored);
    int maxlenof_graph_colored() const;
  };

  char * graph_fsm();
  void set_graph_fsm(const char * new_graph_fsm);
  int maxlenof_graph_fsm() const;
  char * graph();
  void set_graph(const char * new_graph);
  int maxlenof_graph() const;
  GraphDirectionEnum graph_dir();
  void set_graph_dir(const GraphDirectionEnum new_graph_dir);
  int maxlenof_graph_dir() const;
  bool is_graph_colored();
  void set_graph_colored(const bool new_graph_colored);
  int maxlenof_graph_colored() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
