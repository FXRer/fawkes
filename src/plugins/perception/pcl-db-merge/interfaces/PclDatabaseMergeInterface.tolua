$#include <interfaces/PclDatabaseMergeInterface.h>
$using namespace fawkes;
namespace fawkes {
class PclDatabaseMergeInterface : public Interface
{

  class MergeMessage : public Message
  {
    MergeMessage(long * ini_timestamps, char * ini_collection);
    MergeMessage();
    ~MergeMessage();

    long timestamps(int index);
    void set_timestamps(unsigned int index, const long new_timestamps);
    int maxlenof_timestamps() const;
    char * collection();
    void set_collection(const char * new_collection);
    int maxlenof_collection() const;
  };

  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool is_final();
  void set_final(const bool new_final);
  int maxlenof_final() const;
  char * error();
  void set_error(const char * new_error);
  int maxlenof_error() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
