/***************************************************************************
 *  config.cpp - config helper - generated by genconfig 0.3
 *
 *  Config class generated: Mon Jun 18 14:57:15 2007
 *  Used template: ../../../../../src/modules/tools/genconfig/config.template.cpp
 *  Template created: Thu Apr 29 14:27:25 2004
 *  Copyright  2004  Tim Niemueller
 *  niemueller@i5.informatik.rwth-aachen.de
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL file in the doc directory.
 */

/// @cond RCSOFTX_CONFIG
 
#include "apps/fountain/config.h"

#include <iostream>
#include <utils/utils.h>

using namespace std;

/** @class RCSoftXFountainConfig "apps/fountain/config.h"
 * Configration object.
 * Auto-generated configuration object.
 */

/** Constructor.
 * @param configFile config reader
 */
RCSoftXFountainConfig::RCSoftXFountainConfig(CConfigReader *configFile)
{

  string errmsg;

  m_pXMLConfigFile = configFile;
  m_sPrefix = "";

  if (m_pXMLConfigFile != NULL) {
    m_sPrefix = "<RCSoftConfigFile><Lowlevel><FireVision><Fountain>";

    if (!m_pXMLConfigFile->GetNodeValue(m_sPrefix+"<FountainPort>", FountainPort, errmsg)) {
        cout << endl << "** XML ERROR while trying to fetch "+m_sPrefix+"<FountainPort>" << endl << flush;
        cout << __FUNCTION__ << ": " << __FILE__ << "[" << __LINE__ << "]" << endl << flush;
        cout << "Error message from ConfigReader was: " << errmsg << endl;
        exit(1);
    }
    cout << m_sPrefix << "<FountainPort>: " << toString(FountainPort) << endl << flush;

    if (!m_pXMLConfigFile->GetNodeValue(m_sPrefix+"<ImageDelay>", ImageDelay, errmsg)) {
        cout << endl << "** XML ERROR while trying to fetch "+m_sPrefix+"<ImageDelay>" << endl << flush;
        cout << __FUNCTION__ << ": " << __FILE__ << "[" << __LINE__ << "]" << endl << flush;
        cout << "Error message from ConfigReader was: " << errmsg << endl;
        exit(1);
    }
    cout << m_sPrefix << "<ImageDelay>: " << toString(ImageDelay) << endl << flush;

  } else {
    cout << "*** XML ERROR: No XMLConfigReader given to Config Object. Did NOT read config!" << endl << flush;
    exit(2);
  }

}

/** Destructor. */
RCSoftXFountainConfig::~RCSoftXFountainConfig()
{
}

/// @endcond

